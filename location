swagger: "2.0"
info:
  description: "A driver identifiable destination where Charging Stations (Stations) are located. As a general rule if stations are within visible range of each other they are organized together into a location."
  version: "1.0.0"
  title: "Location"
  contact:
    email: "vishvajeet.singh@tekmindz.com"
host: "api.plugshare.com"
basePath: "/location"
tags:
- name: "Get Location"
  description: "This endpoint retrieves a location based on location id."
schemes:
- "https"
- "http"
paths:
  /Get Location/{LocationId}:
    get:
      tags:
      - "Get Location"
      summary: "This endpoint retrive a location based on location id."
      description: "client can retrive a location."
      operationId: "38606"
      produces:
      - "application/json"
      parameters:
      - name: LocationId
        type: integer
        in: path
        description: "provide a id of the location to return"
        required: true
      responses:
        "200":
          description: LocationId operation successfull.
          schema:
            type: array
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid status value"
  /Get Nearby Location/{latitude}:
    get:
      tags:
      - "Get Nearby Location"
      summary: "This endpoint retrieves locations near a given coordinate."
      description: "This endpoint retrieves locations near a given coordinate."
      operationId: "Findbynearlocation"
      produces:
      - "application/json"
      parameters:
        required: true
      - name: latitude
        type: integer
        in: path
        description: provide a latitude of the location to return.
      responses: 
        200:
          description: operation successfull
          schema:
            type: array
            items: 
              $ref: "#/definitions/Pet"
      
  
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Photo:
    type: object
    properties:
      userid:
        type: integer
        example: 85274
      url: 
        type: string
        example: https://photos.plugshare.com/photos/165827.jpg
      create_at: 
        type: string
        example: 2016-11-29T17:57:14Z
      thumbnail: 
        type: string
        example: https://photos.plugshare.com/thumb/165827.png
      caption:
        type: string
        example: plugshare Garge
      order:
        type: integer
        example: 1
      id: 
        type: integer
        example: 127483
    xml:
      name: "photos"       

  Pet:
    type: object
    required:
    - "name"
    - "photoUrls"
    properties:
      valid_outlets: 
        type: array
        items:
          $ref: "#/definitions/valid_outlets"
      LocationId:
        type: integer
        example: 80754
      latitude:
        type: integer
        example: 33.992305
      longitude:
        type: integer
        example: 3333.25874
      description: 
        type: string
        example: this is very nice and awesome place.
      opening_date:
        type: string
        example: None
      updated_at:
        type: string
        example: "2016-12-09T10:16:23Z"
      phone:
        type: string
        example: ""
      cost:
        type: boolean
        example: true
      address:
        type: string
        example: NPX Tower, Sector , Noida, Uttar Pradesh.
      score:
        type: integer
        example: 9.8
      parking_type_name:
        type: string
        example: free
      icon:
        type: string
        example: https://assets.plugshare.com/icons/B.png
      cost_description:
        type: string
        example: "20$/hour"
      reviews:
        type: string
        example: ""
      name: 
        type: string
        example: This is business type parking structure
      url: 
        type: string
        example: www.tekmindz.com
      created_at: 
        type: string
        example: "2016-11-29T17:57:14Z"
      icon_type: 
        type: string
        example: B
      access:
        type: string
        example: 2
      locale:
        type: string
        example: UK
      under_repair:
        type: boolean
        example: true
      poi_name:
        type: string
        example: Local Network Point
      coming_soon:
        type: boolean
        example: false
      photo:
        type: array
        items:
          $ref: "#/definitions/Photo"
      open247:
        type: boolean
        example: true
      station:
        type: array
        items:
          $ref: "#/definitions/station"
    xml:
      name: "Pet"
  station:
    type: object
    properties:
      qr_enable:
        type: boolean
        example: true
      cost:
        type: integer
        example: 2
      pwps_version: 
        type: integer
        example: 2
      location_id:
        type: integer
        example: 14852798
      id:
        type: integer
        example: 2252
      cost_description:
        type: string
        example: "20$/hour"
      pre_charger_instruction:
        type: integer
        example: null
      network:
        type: array
        items:
          $ref: "#/definitions/network" 

    xml:
      name: station
  network:
    type: object
    properties:
      description: 
        type: string
        example: GE's networked platform that allows users to manage and monitor the charging of their electric cars
      url: 
        type: string
        example: www.tekmindz.com
      image:
        type: string
        example: https://assets.plugshare.com/network-images/watt.png
      action_name:
        type: string
        example: sign up
      phone:
        type: integer
        example: 123456789
      action_url:
        type: string
        example: https://assets.plugshare.com/network-images/watt.png
      id:
        type: integer
        example: 22
      name:
        type: string
        example: GE WattStation
    xml:
      name: network
  valid_outlets:
    type: object
    properties:
      available: 
        type: integer
        example: null
      description:
        type: string
        example: null
      power:
        type: integer
        example: 0
      connecter:
        type: integer
        example: 2
      id:
        type: integer
        example: 22510
      outlex_index:
        type: integer
        example: null
    xml:
      name: valid_outlets
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
